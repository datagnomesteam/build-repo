name: Push Database To Dockerhub

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    timeout-minutes: 60
    runs-on: ubuntu-22.04
    env:
      DOCKERHUB_USERNAME: datagnomesteam
      MAIN_REPO_NAME: datagnomesteam/project_database
      DOCKERFILE_PATH: ${{ github.workspace }}/db
      DOCKER_BUILDKIT: 1
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true
      CLEAN_OLD_TAGS: false

    steps:
      - name: Check disk space
        run: df -h

      - name: Maximize build space
        run: |
          echo "Starting build space maximization..."

          # --- Remove Android components ---
          echo "Removing Android SDK and related directories..."
          sudo rm -rf /usr/local/lib/android* /usr/local/lib/android-sdk*
          unset ANDROID_HOME ANDROID_NDK ANDROID_NDK_HOME ANDROID_SDK_ROOT

          # --- Remove extra directories ---
          echo "Removing extra directories (Miniconda, Homebrew, toolchain dirs)..."
          sudo rm -rf /usr/share/miniconda /home/linuxbrew "$HOME/.cargo" /opt/ghcup /opt/ghc /opt/cabal /opt/stack

          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /usr/lib/jvm || true
          sudo rm -rf /usr/local/share/boost /usr/share/swift /usr/local/.ghcup || true
          sudo docker image prune --all --force || true
          sudo apt-get purge -y '^ghc-.*' '^dotnet-.*' '^aspnetcore-.*' '^mysql-.*' '^php.*' azure-cli google-cloud-cli hhvm google-chrome-stable firefox powershell mono-devel libgl1-mesa-dri || true

          # --- Clean up ---
          echo "Cleaning up apt caches..."
          sudo apt-get autoremove -y
          sudo apt-get clean

          echo "Build space maximization complete. Current disk space:"
          df -h

      - name: Maximize build space
        run: |
          set -e
          echo "Starting build space maximization..."

          # --- Remove Android components ---
          echo "Removing Android SDK and related directories..."
          sudo rm -rf /usr/local/lib/android* /usr/local/lib/android-sdk*
          unset ANDROID_HOME ANDROID_NDK ANDROID_NDK_HOME ANDROID_SDK_ROOT

          # --- Remove optional language runtimes and development tools ---
          # Do NOT remove core packages such as python3 or perl since many system tools depend on them.
          echo "Removing optional packages (non-critical for Docker builds)..."
          sudo apt-get remove -y --purge \
              'php*' \
              composer \
              'phpunit*' \
              'ruby*' \
              'julia*' \
              'kotlin*' \
              'mono*' \
              'msbuild*' \
              ant \
              gradle \
              'maven*' \
              'sbt*' \
              'leiningen*' || true

          # --- Remove optional CLI and build tools ---
          sudo apt-get remove -y --purge \
              buildah \
              podman \
              git-ftp \
              haveged \
              jq \
              kubectl \
              skopeo \
              sphinxsearch || true

          # --- Cleanup package files ---
          echo "Cleaning up package caches..."
          sudo apt-get autoremove -y
          sudo apt-get clean

          # --- Remove extra directories not managed by apt ---
          echo "Removing extra directories (Miniconda, Homebrew, toolchain dirs)..."
          sudo rm -rf /usr/share/miniconda /home/linuxbrew "$HOME/.cargo" /opt/ghcup /opt/ghc /opt/cabal /opt/stack

          echo "Current disk space:"
          df -h

          echo "Build space maximized."

      - name: Check disk space
        run: df -h

      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
            # this might remove tools that are actually needed,
            # if set to "true" but frees about 6 GB
            tool-cache: false
            android: false
            dotnet: false
            haskell: false
            large-packages: false
            docker-images: false
            swap-storage: false

      - name: Check disk space
        run: df -h

      - name: Maximize build space
        run: |
          set -e
          echo "Starting build space maximization..."

          # --- Remove Android components ---
          echo "Removing Android SDK and related directories..."
          sudo rm -rf /usr/local/lib/android* /usr/local/lib/android-sdk*
          unset ANDROID_HOME ANDROID_NDK ANDROID_NDK_HOME ANDROID_SDK_ROOT

          # --- Remove optional language runtimes and development tools ---
          # Do NOT remove core packages such as python3 or perl since many system tools depend on them.
          echo "Removing optional packages (non-critical for Docker builds)..."
          sudo apt-get remove -y --purge \
              'php*' \
              composer \
              'phpunit*' \
              'ruby*' \
              'julia*' \
              'kotlin*' \
              'mono*' \
              'msbuild*' \
              ant \
              gradle \
              'maven*' \
              'sbt*' \
              'leiningen*'

          # --- Remove optional CLI and build tools ---
          sudo apt-get remove -y --purge \
              buildah \
              podman \
              git-ftp \
              haveged \
              jq \
              kubectl \
              skopeo \
              sphinxsearch

          # --- Cleanup package files ---
          echo "Cleaning up package caches..."
          sudo apt-get autoremove -y
          sudo apt-get clean

          # --- Remove extra directories not managed by apt ---
          echo "Removing extra directories (Miniconda, Homebrew, toolchain dirs)..."
          sudo rm -rf /usr/share/miniconda /home/linuxbrew "$HOME/.cargo" /opt/ghcup /opt/ghc /opt/cabal /opt/stack

          echo "Current disk space:"
          df -h

          echo "Build space maximized."

      - name: Maximize build space
        run: |
          set -e
          echo "Starting cleanup to remove unwanted languages and package managers except pip..."

          # Remove NodeJS and its package manager (npm)
          echo "Removing NodeJS and npm..."
          sudo apt-get remove -y --purge nodejs npm || true

          # Remove Perl and its package manager CPAN (or cpanminus)
          echo "Removing Perl and CPAN/cpanminus..."
          sudo apt-get remove -y --purge perl cpanminus || true

          # Remove Ruby and its package manager (gem)
          echo "Removing Ruby and gem..."
          sudo apt-get remove -y --purge ruby ruby-full gem || true

          # Remove Swift
          echo "Removing Swift..."
          sudo apt-get remove -y --purge swift || true

          # Remove Julia
          echo "Removing Julia..."
          sudo apt-get remove -y --purge julia || true

          # Remove Kotlin
          echo "Removing Kotlin..."
          sudo apt-get remove -y --purge kotlin || true

          # Remove PHP package manager Composer (if installed)
          echo "Removing Composer..."
          sudo apt-get remove -y --purge composer || true

          # Remove Rust package manager Cargo (if installed)
          echo "Removing Cargo..."
          sudo apt-get remove -y --purge cargo || true

          # Remove directories of package managers installed outside apt (such as Homebrew)
          echo "Removing Homebrew directories..."
          sudo rm -rf /home/linuxbrew /usr/local/Homebrew

          # Clean up unused packages and package caches.
          echo "Cleaning up package caches..."
          sudo apt-get autoremove -y || true
          sudo apt-get clean || true

          echo "Disk space after cleanup:"
          df -h

          echo "Cleanup complete. Proceeding to build Docker container."

      - name: Install essential packages
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            ca-certificates \
            curl \
            gnupg \
            lsb-release \
            jq \
            gzip \
            tar \
            qemu-user-static \
            aria2

      - name: Install Docker
        run: |
          sudo mkdir -p /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends docker-ce docker-ce-cli containerd.io docker-compose-plugin

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download dataset
        working-directory: ${{ github.workspace }}
        run: |
          aria2c -x16 -s16 -k10M --file-allocation=falloc --max-connection-per-server=16 --min-split-size=10M --max-concurrent-downloads=1 --optimize-concurrent-downloads=true --check-certificate=false --max-tries=50 --retry-wait=5 --allow-overwrite=true --auto-file-renaming=false "${{ secrets.DATASET_URL }}" -o db/pg.zst

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master
            memory=6g

      - name: Build and push multi-arch image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile
          platforms: linux/arm64
          push: false
          tags: ${{ env.MAIN_REPO_NAME }}:latest
          provenance: false
          secrets: |
            dataset_url=${{ secrets.DATASET_URL }}

      - name: Check disk space
        run: df -h

      - name: Cleanups
        if: always()
        run: |
          sudo docker system prune -af --volumes || true
          sudo docker builder prune -af || true
          sudo docker image prune -af || true
          echo "Final disk space:"
          df -h
