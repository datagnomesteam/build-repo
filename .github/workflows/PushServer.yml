name: Push Server To Dockerhub

on:
  push:
    branches:
      - main
      - docker-*
    paths:
      - "server/**"
      - ".github/workflows/PushServer.yml"
  workflow_dispatch:

jobs:
  build:
    timeout-minutes: 20
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: datagnomesteam
      OFFICIAL_TAG: datagnomesteam/project_server:latest
      MAIN_REPO_NAME: datagnomesteam/project_server
      DOCKERFILE_PATH: ./server
      CLEAN_OLD_TAGS: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install System Dependencies
        run: sudo apt-get update && sudo apt-get install -y jq curl

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Retrieve Docker Credentials
        id: retrieve-credentials
        run: |
          echo "Retrieving Docker credentials..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" > docker-credentials.txt
          chmod 600 docker-credentials.txt

      - name: Log in to Docker Hub
        run: |
          echo "Logging in to Docker Hub..."
          docker_username=${{ env.DOCKERHUB_USERNAME }}
          docker_password=$(cat docker-credentials.txt)
          echo "::add-mask::$docker_password"
          echo "$docker_password" | docker login -u "$docker_username" --password-stdin

      - name: Clean up old Docker images
        if: ${{ env.CLEAN_OLD_TAGS == 'true' }}
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ env.DOCKERHUB_USERNAME }}\", \"password\": \"$(cat docker-credentials.txt)\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)

          # Get list of all tags except 'latest'
          TAGS=$(curl -s -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${{ env.MAIN_REPO_NAME }}/tags/?page_size=100" | jq -r '.results[].name')

          # Delete each tag
          for TAG in $TAGS; do
            if [ "$TAG" != "latest" ]; then
              echo "Deleting tag: $TAG"
              curl -s -X DELETE -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${{ env.MAIN_REPO_NAME }}/tags/${TAG}/"
            fi
          done

          # Force remove the latest tag if it exists
          curl -s -X DELETE -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${{ env.MAIN_REPO_NAME }}/tags/latest/"

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.OFFICIAL_TAG }}

      - name: Prepare DockerHub credentials for description update
        run: |
          docker_password=$(cat docker-credentials.txt)
          echo "::add-mask::$docker_password"
          echo "DOCKERHUB_PASSWORD=$docker_password" >> $GITHUB_ENV

      - name: Update repo description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
          repository: ${{ env.MAIN_REPO_NAME }}
          readme-filepath: ./README.md

      - name: Cleanups
        if: always()
        run: |
          if [ -f docker-credentials.txt ]; then
            rm -f docker-credentials.txt
          fi

          if [ -f readme_content.md ]; then
            rm -f readme_content.md
          fi

          docker builder prune -af || true
          docker image prune -af || true

      - name: README!
        run: |
          echo "Find the latest image at: https://hub.docker.com/r/datagnomesteam/project_server"

      - name: Send Discord alert on failure
        if: failure()
        run: |
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          curl -X POST "${{ secrets.DISCORD_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "username": "GitHub Actions",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "content": "**ðŸš¨ GitHub Action Failed!**\n\nWorkflow Name: `${{ github.workflow }}`\nCommit: `'"$SHORT_SHA"'`\n[View Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }'