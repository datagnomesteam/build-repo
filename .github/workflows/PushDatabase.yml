name: Push Database To Dockerhub

on:
  push:
    branches:
      - main
      - docker-*
    paths:
      - 'db/**'
      - '!db/Dockerfile.local'
      - '.github/workflows/PushDatabase.yml'
  workflow_dispatch:

jobs:
  prepare-database:
    timeout-minutes: 60
    runs-on: ubuntu-20.04  # Using older Ubuntu version for smaller size
    env:
      DOCKERHUB_USERNAME: datagnomesteam
      MAIN_REPO_NAME: datagnomesteam/project_database
      DOCKERFILE_PATH: ${{ github.workspace }}/db
      DOCKER_BUILDKIT: 1
      BUILDKIT_INLINE_CACHE: 1
      ACTIONS_STEP_DEBUG: true
      ACTIONS_RUNNER_DEBUG: true

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/share/phantomjs
          sudo rm -rf /etc/apache2
          sudo rm -rf /etc/default/mono-xsp4
          sudo rm -rf /etc/nginx
          sudo rm -rf /usr/local/share/chromedriver-linux64
          sudo rm -rf /usr/local/share/edge_driver
          sudo rm -rf /usr/local/share/gecko_driver
          sudo rm -rf /usr/share/java/selenium-server.jar
          docker system prune -af --volumes || true
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master
            memory=6g

      - name: Retrieve Docker Credentials
        id: retrieve-credentials
        run: |
          echo "Retrieving Docker credentials..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" > docker-credentials.txt
          chmod 600 docker-credentials.txt

      - name: Log in to Docker Hub
        run: |
          echo "Logging in to Docker Hub..."
          docker_username=${{ env.DOCKERHUB_USERNAME }}
          docker_password=$(cat docker-credentials.txt)
          echo "::add-mask::$docker_password"
          echo "$docker_password" | docker login -u "$docker_username" --password-stdin

      - name: Download and prepare database
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.hub
          target: prepare
          push: false
          load: true
          tags: ${{ env.MAIN_REPO_NAME }}:prepare
          secrets: |
            dataset_url=${{ secrets.DATASET_URL }}
          cache-from: type=registry,ref=${{ env.MAIN_REPO_NAME }}:prepare-cache
          cache-to: type=registry,ref=${{ env.MAIN_REPO_NAME }}:prepare-cache,mode=max

      - name: Save prepared database
        run: |
          docker save ${{ env.MAIN_REPO_NAME }}:prepare | gzip > prepared_db.tar.gz
          docker system prune -af --volumes || true
          df -h

      - name: Cache prepared database
        uses: actions/cache@v4
        with:
          path: prepared_db.tar.gz
          key: prepared-db-${{ github.run_id }}
          restore-keys: |
            prepared-db-

      - name: Cleanups
        if: always()
        run: |
          if [ -f docker-credentials.txt ]; then
            rm -f docker-credentials.txt
          fi
          if [ -f prepared_db.tar.gz ]; then
            rm -f prepared_db.tar.gz
          fi
          docker system prune -af --volumes || true
          docker builder prune -af || true
          docker image prune -af || true
          df -h

  build-and-push:
    needs: prepare-database
    timeout-minutes: 30
    runs-on: ubuntu-20.04  # Using older Ubuntu version for smaller size
    env:
      DOCKERHUB_USERNAME: datagnomesteam
      MAIN_REPO_NAME: datagnomesteam/project_database
      DOCKERFILE_PATH: ${{ github.workspace }}/db
      PLATFORM: ${{ matrix.platform }}
      DOCKER_BUILDKIT: 1
      BUILDKIT_INLINE_CACHE: 1

    strategy:
      matrix:
        platform: [linux/amd64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clean up disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /usr/local/lib/node_modules
          sudo rm -rf /usr/local/share/powershell
          sudo rm -rf /usr/local/share/chromium
          sudo rm -rf /usr/local/share/phantomjs
          sudo rm -rf /etc/apache2
          sudo rm -rf /etc/default/mono-xsp4
          sudo rm -rf /etc/nginx
          sudo rm -rf /usr/local/share/chromedriver-linux64
          sudo rm -rf /usr/local/share/edge_driver
          sudo rm -rf /usr/local/share/gecko_driver
          sudo rm -rf /usr/share/java/selenium-server.jar
          docker system prune -af --volumes || true
          df -h

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ env.PLATFORM }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:master
            memory=6g

      - name: Restore prepared database
        uses: actions/cache@v4
        with:
          path: prepared_db.tar.gz
          key: prepared-db-${{ needs.prepare-database.outputs.run_id }}

      - name: Load prepared database
        run: |
          gunzip -c prepared_db.tar.gz | docker load
          rm -f prepared_db.tar.gz
          df -h

      - name: Retrieve Docker Credentials
        id: retrieve-credentials
        run: |
          echo "Retrieving Docker credentials..."
          echo "${{ secrets.DOCKERHUB_TOKEN }}" > docker-credentials.txt
          chmod 600 docker-credentials.txt

      - name: Log in to Docker Hub
        run: |
          echo "Logging in to Docker Hub..."
          docker_username=${{ env.DOCKERHUB_USERNAME }}
          docker_password=$(cat docker-credentials.txt)
          echo "::add-mask::$docker_password"
          echo "$docker_password" | docker login -u "$docker_username" --password-stdin

      - name: Clean up old Docker images
        run: |
          TOKEN=$(curl -s -H "Content-Type: application/json" -X POST -d "{\"username\": \"${{ env.DOCKERHUB_USERNAME }}\", \"password\": \"$(cat docker-credentials.txt)\"}" https://hub.docker.com/v2/users/login/ | jq -r .token)
          curl -s -X DELETE -H "Authorization: JWT ${TOKEN}" "https://hub.docker.com/v2/repositories/${{ env.MAIN_REPO_NAME }}/tags/latest/"

      - name: Build and push final image
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.DOCKERFILE_PATH }}
          file: ${{ env.DOCKERFILE_PATH }}/Dockerfile.hub
          platforms: ${{ env.PLATFORM }}
          push: true
          tags: ${{ env.MAIN_REPO_NAME }}:latest
          outputs: type=image,compression=zstd,compression-level=19
          cache-from: type=registry,ref=${{ env.MAIN_REPO_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.MAIN_REPO_NAME }}:buildcache,mode=max

      - name: Update repo description
        if: matrix.platform == 'linux/amd64'
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
          repository: ${{ env.MAIN_REPO_NAME }}
          readme-filepath: ./README.md

      - name: Cleanups
        if: always()
        run: |
          if [ -f docker-credentials.txt ]; then
            rm -f docker-credentials.txt
          fi
          if [ -f prepared_db.tar.gz ]; then
            rm -f prepared_db.tar.gz
          fi
          docker system prune -af --volumes || true
          docker builder prune -af || true
          docker image prune -af || true
          df -h